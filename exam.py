# -*- coding: utf-8 -*-
"""Exam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CfxoFEO2kkD7EEnUoaN_QvUo22I9vrlY
"""

!pip install transformers torch sacrebleu

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
from sacrebleu.metrics import BLEU
from IPython.display import display, HTML

# Форматирование заголовков
def print_title(text):
    html = f"<h3 style='color:black; text-align:center; margin-top:40px; border-bottom:1px solid #ccc;'>{text}</h3>"
    display(HTML(html))

# Форматироваие таблиц
def generate_tables(original_text, translations, scores):
    table_html = ""

    # Сравнение оригинала и переводов
    table_html += f"""
    <h3 style='color:black; text-align:center; margin-top:40px; border-bottom:1px solid #ccc;'>Сравнение оригинала и переводов</h3>
    <table style='border-collapse: collapse; width: 100%; max-width: 1000px; margin: auto; border:1px solid black;'>
      <tr style='background-color: #f2f2f2;'>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Оригинал</th>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 1</th>
      </tr>
      <tr>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{original_text}</td>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[0]}</td>
      </tr>

      <tr style='background-color: #f2f2f2;'>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Оригинал</th>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 2</th>
      </tr>
      <tr>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{original_text}</td>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[1]}</td>
      </tr>

      <tr style='background-color: #f2f2f2;'>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Оригинал</th>
        <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 3</th>
      </tr>
      <tr>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{original_text}</td>
        <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[2]}</td>
      </tr>
    </table>
    """

    # Результаты BLEU
    table_html += f"""
    <h3 style='color:black; text-align:center; margin-top:40px; border-bottom:1px solid #ccc;'>Результаты оценки качества перевода</h3>
    <table style='border-collapse: collapse; width: 100%; max-width: 1000px; margin: auto; border:1px solid black;'>
      <thead>
        <tr style='background-color: #f2f2f2;'>
          <th style='border:1px solid black;padding:10px;text-align:center;' colspan='3'>BLEU</th>
        </tr>
        <tr style='background-color: #f2f2f2;'>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 1</th>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 2</th>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Модель 3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style='border:1px solid black;padding:10px;text-align:center;'>{scores[0]:.2f}</td>
          <td style='border:1px solid black;padding:10px;text-align:center;'>{scores[1]:.2f}</td>
          <td style='border:1px solid black;padding:10px;text-align:center;'>{scores[2]:.2f}</td>
        </tr>
      </tbody>
    </table>
    """

    # Таблица с вариантами переводов
    table_html += f"""
    <h3 style='color:black; text-align:center; margin-top:40px; border-bottom:1px solid #ccc;'>Варианты перевода</h3>
    <table style='border-collapse: collapse; width: 100%; max-width: 1000px; margin: auto; border:1px solid black;'>
      <thead>
        <tr style='background-color: #f2f2f2;'>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Перевод моделью 1</th>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Перевод моделью 2</th>
          <th style='border:1px solid black;padding:10px;text-align:center;'>Перевод моделью 3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[0]}</td>
          <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[1]}</td>
          <td style='border:1px solid black;padding:10px;white-space: pre-wrap;'>{translations[2]}</td>
        </tr>
      </tbody>
    </table>
    """

    return table_html

# Загрузка модели и токенизатора
def load_model(model_name):
    print(f"Загрузка модели {model_name}...")
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    return tokenizer, model

# Перевод текста с заданным количеством новых токенов
def translate_with_model(text, tokenizer, model):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True)

    outputs = model.generate(
        **inputs,
        max_new_tokens=800,
        num_beams=4,
        early_stopping=True
    )

    translated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return translated_text

# Разделение текста на части по словам
def split_text_by_words(text, max_words=100):
    words = text.split()
    parts = []
    for i in range(0, len(words), max_words):
        part = " ".join(words[i:i + max_words])
        parts.append(part)
    return parts

# Перевод длинного текста по частям
def translate_long_text(text, tokenizer, model, prefix=""):
    input_parts = [prefix + part for part in split_text_by_words(text)]
    translated_parts = []

    for part in input_parts:
        try:
            translated_part = translate_with_model(part, tokenizer, model)
            translated_parts.append(translated_part)
        except Exception as e:
            translated_parts.append(f"[Ошибка при переводе части]")

    return " ".join(translated_parts).strip()

# Вычисление BLEU
def calculate_bleu(hypothesis, reference):
    bleu = BLEU(tokenize='zh')  # универсальный токенизатор
    score = bleu.corpus_score([hypothesis], [[reference]])
    return round(score.score, 2)

# Взаимодействие с программой
def main():
    # Ввод текста
    print_title("Введите текст на английском (до 200 слов)")
    original_text = input("Введите текст на английском (до 200 слов): ")

    word_count = len(original_text.split())
    if word_count > 200:
        print(f"⚠️ Введено более 200 слов ({word_count}), обрезаем до 200...")
        original_text = " ".join(original_text.split()[:200])

    # Загрузка моделей
    print_title("Загрузка моделей перевода...")
    models_info = [
        ("Helsinki-NLP/opus-mt-en-ru", *load_model("Helsinki-NLP/opus-mt-en-ru")),
        ("utrobinmv/t5_translate_en_ru_zh_base_200", *load_model("utrobinmv/t5_translate_en_ru_zh_base_200")),
        ("utrobinmv/t5_translate_en_ru_zh_large_1024_v2", *load_model("utrobinmv/t5_translate_en_ru_zh_large_1024_v2"))
    ]

    # Перевод текста всеми моделями
    print_title("Выполняется перевод...")
    translations = []
    for i, (model_name, tokenizer, model) in enumerate(models_info):
        try:
            prefix = "translate English to Russian: " if "t5" in model_name.lower() else ""
            translated_text = translate_long_text(original_text, tokenizer, model, prefix=prefix)
        except Exception as e:
            translated_text = f"Ошибка перевода моделью {i+1}: {str(e)}"
        translations.append(translated_text)
        print(f"Перевод моделью {i+1} завершён.")

    # Вычисление метрики BLEU
    scores = [calculate_bleu(t, original_text) for t in translations]

    # Вывод таблиц
    display(HTML(generate_tables(original_text, translations, scores)))

# Запуск
main()